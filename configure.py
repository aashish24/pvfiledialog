import os
import sipconfig
from PyQt4 import pyqtconfig

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "pvFileDialogModelWrapper.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()

# Get the extra SIP flags needed by the imported PyQt modules.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
pyqt_sip_flags = config.pyqt_sip_flags

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
os.system(" ".join(['sip', "-c", ".", "-b", build_file, "-I"+"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/build/Qt/Core","-I"+"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/ParaViewCore/ServerManager","-I"+config.pyqt_sip_dir, pyqt_sip_flags, "pvFileDialogModelWrapper.sip"]))

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

installs.append(["pvFileDialogModelWrapper.sip", os.path.join(config.default_sip_dir, "pvFileDialogModelWrapper")])

installs.append(["pvFileDialogModelWrapperConfig.py", config.default_mod_dir])

# Create the Makefile.  The QtGuiModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = pyqtconfig.QtGuiModuleMakefile(
    configuration=config,
    build_file=build_file,
    installs=installs
)

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
makefile.extra_libs = ["pvFileDialogModelWrapper", "vtkPVClientServerCore", "vtkPVServerManager", "pqCore"]
makefile.extra_lib_dirs = [
".",
"/home/aashish/tools/uv-cdat/paraview/build/bin",
"/home/aashish/tools/uv-cdat/paraview/build/lib",
"/home/aashish/tools/qt/install-4.7.2/lib",
"../"
]
makefile.extra_include_dirs += [
"/home/aashish/tools/uv-cdat/paraview/build/Qt/Core",
"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/ParaViewCore/ClientServerCore",
"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/VTK/Common/Core",
"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/build/VTK/Common/Core",
"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/ParaViewCore/ServerManager",
"/home/aashish/tools/uv-cdat/paraview/ParaView-3.11.1/ParaViewCore/ServerImplementation",
"/home/aashish/tools/qt/install-4.7.2/include",
"/home/aashish/tools/qt/install-4.7.2/include/QtCore",
"/home/aashish/tools/qt/install-4.7.2/include/QtGui",
"../"
]

# Generate the Makefile itself.
makefile.generate()

# Now we create the configuration module.  This is done by merging a Python
# dictionary (whose values are normally determined dynamically) with a
# (static) template.
content = {
    # Publish where the SIP specifications for this module will be
    # installed.
    "pvFileDialogModelWrapper_sip_dir":    config.default_sip_dir,

    # Publish the set of SIP flags needed by this module.  As these are the
    # same flags needed by the qt module we could leave it out, but this
    # allows us to change the flags at a later date without breaking
    # scripts that import the configuration module.
    "pvFileDialogModelWrapper_sip_flags":  pyqt_sip_flags
}

# This creates the pvFileDialogModelWrapperconfig.py module from the pvFileDialogModelWrapperconfig.py.in
# template and the dictionary.
sipconfig.create_config_module("pvFileDialogModelWrapperconfig.py", "pvFileDialogModelWrapperconfig.py.in", content)
